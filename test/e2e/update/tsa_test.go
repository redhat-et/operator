//go:build integration

package update

import (
	"context"
	"time"

	tsaAction "github.com/securesign/operator/internal/controller/tsa/actions"
	tsaUtils "github.com/securesign/operator/internal/controller/tsa/utils"
	"github.com/securesign/operator/test/e2e/support/tas/tsa"
	"sigs.k8s.io/yaml"

	"github.com/securesign/operator/test/e2e/support/tas"
	"github.com/securesign/operator/test/e2e/support/tas/rekor"
	"github.com/securesign/operator/test/e2e/support/tas/tuf"

	. "github.com/onsi/ginkgo/v2"
	. "github.com/onsi/gomega"
	"github.com/securesign/operator/api/v1alpha1"
	"github.com/securesign/operator/internal/controller/constants"
	tufAction "github.com/securesign/operator/internal/controller/tuf/actions"
	"github.com/securesign/operator/test/e2e/support"
	v1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/api/meta"
	"k8s.io/apimachinery/pkg/types"
	runtimeCli "sigs.k8s.io/controller-runtime/pkg/client"
)

var _ = Describe("TSA update", Ordered, func() {
	SetDefaultEventuallyTimeout(time.Duration(5) * time.Minute)
	cli, _ := CreateClient()
	ctx := context.TODO()

	var targetImageName string
	var namespace *v1.Namespace
	var s *v1alpha1.Securesign

	AfterEach(func() {
		if CurrentSpecReport().Failed() && support.IsCIEnvironment() {
			support.DumpNamespace(ctx, cli, namespace.Name)
		}
	})

	BeforeAll(func() {
		namespace = support.CreateTestNamespace(ctx, cli)
		DeferCleanup(func() {
			_ = cli.Delete(ctx, namespace)
		})
		s = securesignResource(namespace)
	})

	BeforeAll(func() {
		targetImageName = support.PrepareImage(ctx)
	})

	Describe("Install with autogenerated certificates", func() {
		BeforeAll(func() {
			Expect(cli.Create(ctx, s)).To(Succeed())
		})

		It("All other components are running", func() {
			tas.VerifyAllComponents(ctx, cli, s, true)
		})
	})

	Describe("modify tsa signer and certificate chain", func() {

		var tufGeneration, tsaGeneration int64

		It("stored current deployment observed generations ", func() {
			tufGeneration = getDeploymentGeneration(ctx, cli,
				types.NamespacedName{Namespace: namespace.Name, Name: tufAction.DeploymentName},
			)
			Expect(tufGeneration).Should(BeNumerically(">", 0))
			tsaGeneration = getDeploymentGeneration(ctx, cli,
				types.NamespacedName{Namespace: namespace.Name, Name: tsaAction.DeploymentName},
			)
			Expect(tsaGeneration).Should(BeNumerically(">", 0))
		})

		It("modified signer and certificate chain", func() {
			Expect(cli.Get(ctx, runtimeCli.ObjectKeyFromObject(s), s)).To(Succeed())
			s.Spec.TimestampAuthority.Signer = v1alpha1.TimestampAuthoritySigner{
				CertificateChain: v1alpha1.CertificateChain{
					CertificateChainRef: &v1alpha1.SecretKeySelector{
						LocalObjectReference: v1alpha1.LocalObjectReference{
							Name: "test-tsa-secret",
						},
						Key: "certificateChain",
					},
				},
				File: &v1alpha1.File{
					PrivateKeyRef: &v1alpha1.SecretKeySelector{
						LocalObjectReference: v1alpha1.LocalObjectReference{
							Name: "test-tsa-secret",
						},
						Key: "leafPrivateKey",
					},
					PasswordRef: &v1alpha1.SecretKeySelector{
						LocalObjectReference: v1alpha1.LocalObjectReference{
							Name: "test-tsa-secret",
						},
						Key: "leafPrivateKeyPassword",
					},
				},
			}
			Expect(cli.Update(ctx, s)).To(Succeed())
		})

		It("has status Pending: waiting on test-tsa-secret", func() {
			Eventually(func(g Gomega) string {
				ctl := tsa.Get(ctx, cli, namespace.Name, s.Name)()
				g.Expect(ctl).NotTo(BeNil())
				c := meta.FindStatusCondition(ctl.Status.Conditions, constants.Ready)
				g.Expect(c).ToNot(BeNil())
				return c.Reason
			}).Should(Equal(constants.Pending))
		})

		It("created test-tsa-secret", func() {
			Expect(cli.Create(ctx, tsa.CreateSecrets(namespace.Name, "test-tsa-secret"))).Should(Succeed())
		})

		It("has status Ready", func() {
			Eventually(func(g Gomega) string {
				ctl := rekor.Get(ctx, cli, namespace.Name, s.Name)()
				g.Expect(ctl).NotTo(BeNil())
				return meta.FindStatusCondition(ctl.Status.Conditions, constants.Ready).Reason
			}).Should(Equal(constants.Ready))
		})

		It("updated TSA deployment", func() {
			Eventually(func() int64 {
				return getDeploymentGeneration(ctx, cli, types.NamespacedName{Namespace: namespace.Name, Name: tsaAction.DeploymentName})
			}).Should(BeNumerically(">", tsaGeneration))
		})

		It("updated TUF deployment", func() {
			Eventually(func() int64 {
				return getDeploymentGeneration(ctx, cli, types.NamespacedName{Namespace: namespace.Name, Name: tufAction.DeploymentName})
			}).Should(BeNumerically(">", tufGeneration))
		})

		It("verify TSA and TUF", func() {
			tsa.Verify(ctx, cli, namespace.Name, s.Name)
			tuf.Verify(ctx, cli, namespace.Name, s.Name)
		})

		It("verify new configuration", func() {
			var pod *v1.Pod
			var t *v1alpha1.TimestampAuthority
			Eventually(func(g Gomega) {
				pod = tsa.GetServerPod(ctx, cli, namespace.Name)()
				g.Expect(pod).ToNot(BeNil())
				t = tsa.Get(ctx, cli, namespace.Name, s.Name)()
				g.Expect(t).ToNot(BeNil())
			}).Should(Succeed())

			Expect(pod.Spec.Volumes).To(ContainElement(And(
				WithTransform(func(v v1.Volume) string { return v.Name }, Equal("tsa-cert-chain")),
				WithTransform(func(v v1.Volume) string { return v.VolumeSource.Secret.SecretName }, Equal("test-tsa-secret")),
			)))

			Expect(pod.Spec.Volumes).To(ContainElement(And(
				WithTransform(func(v v1.Volume) string { return v.Name }, Equal("tsa-file-signer-config")),
				WithTransform(func(v v1.Volume) string { return v.VolumeSource.Secret.SecretName }, Equal("test-tsa-secret")),
			)))

			certChainSecret := &v1.Secret{}
			privateKeySecret := &v1.Secret{}
			expectedSecret := &v1.Secret{}
			Expect(cli.Get(ctx, types.NamespacedName{Namespace: namespace.Name, Name: t.Status.Signer.CertificateChain.CertificateChainRef.Name}, certChainSecret)).To(Succeed())
			Expect(cli.Get(ctx, types.NamespacedName{Namespace: namespace.Name, Name: t.Status.Signer.File.PrivateKeyRef.Name}, privateKeySecret)).To(Succeed())
			Expect(cli.Get(ctx, types.NamespacedName{Namespace: namespace.Name, Name: "test-tsa-secret"}, expectedSecret)).To(Succeed())
		})

		It("verify by cosign", func() {
			tas.VerifyByCosign(ctx, cli, s, targetImageName)
		})
	})

	Describe("Update NTP config", func() {

		var tsaGeneration int64

		It("stored current deployment observed generations ", func() {
			tsaGeneration = getDeploymentGeneration(ctx, cli,
				types.NamespacedName{Namespace: namespace.Name, Name: tsaAction.DeploymentName},
			)
			Expect(tsaGeneration).Should(BeNumerically(">", 0))
		})

		It("modified NTP config", func() {
			Expect(cli.Get(ctx, runtimeCli.ObjectKeyFromObject(s), s)).To(Succeed())
			s.Spec.TimestampAuthority.NTPMonitoring = v1alpha1.NTPMonitoring{
				Enabled: true,
				Config: &v1alpha1.NtpMonitoringConfig{
					RequestAttempts: 3,
					RequestTimeout:  5,
					NumServers:      4,
					ServerThreshold: 3,
					MaxTimeDelta:    6,
					Period:          40,
					Servers:         []string{"time.apple.com", "time.google.com", "time-a-b.nist.gov", "time-b-b.nist.gov", "gbg1.ntp.se"},
				},
			}
			Expect(cli.Update(ctx, s)).To(Succeed())
		})

		It("has status Ready", func() {
			Eventually(func(g Gomega) string {
				ctl := rekor.Get(ctx, cli, namespace.Name, s.Name)()
				g.Expect(ctl).NotTo(BeNil())
				return meta.FindStatusCondition(ctl.Status.Conditions, constants.Ready).Reason
			}).Should(Equal(constants.Ready))
		})

		It("updated TSA deployment", func() {
			Eventually(func() int64 {
				return getDeploymentGeneration(ctx, cli, types.NamespacedName{Namespace: namespace.Name, Name: tsaAction.DeploymentName})
			}).Should(BeNumerically(">", tsaGeneration))
		})

		It("verify TSA", func() {
			tsa.Verify(ctx, cli, namespace.Name, s.Name)
		})

		It("verify new configuration", func() {
			var pod *v1.Pod
			var t *v1alpha1.TimestampAuthority
			Eventually(func(g Gomega) {
				pod = tsa.GetServerPod(ctx, cli, namespace.Name)()
				g.Expect(pod).ToNot(BeNil())
				t = tsa.Get(ctx, cli, namespace.Name, s.Name)()
				g.Expect(t).ToNot(BeNil())
			}).Should(Succeed())

			Expect(pod.Spec.Volumes).To(ContainElements(And(
				WithTransform(func(v v1.Volume) string { return v.Name }, Equal("ntp-config")),
				WithTransform(func(v v1.Volume) string { return v.VolumeSource.ConfigMap.Name }, Equal(t.Status.NTPMonitoring.Config.NtpConfigRef.Name)))))

			cm := &v1.ConfigMap{}
			Expect(cli.Get(ctx, types.NamespacedName{Namespace: namespace.Name, Name: t.Status.NTPMonitoring.Config.NtpConfigRef.Name}, cm)).To(Succeed())
			config := &tsaUtils.NtpConfig{}
			Expect(yaml.Unmarshal([]byte(cm.Data["ntp-config.yaml"]), config)).To(Succeed())
			Expect(config.Period).To(Equal(40))
		})

		It("verify by cosign", func() {
			tas.VerifyByCosign(ctx, cli, s, targetImageName)
		})
	})
})
